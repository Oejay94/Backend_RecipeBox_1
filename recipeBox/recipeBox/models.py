
'''Assignment: delete later
1. index page (recipe list view) with titles of loaded recipes and numbers
each title is a link --> goes to receipe content
    a. number
    b. receipe title (linkable to detail)
2. receipe content view : author name,receipe info w/ clickable author detail page
    a. Title (CharField)
    b. Author (ForeignKey)
    c. Description (TextField)
    d. Time Required (Charfield) (for example, "One hour")
    e. Instructions (TextField)
3. Author detail view --> see list of recipes Author has contributed
- edit models through admin page only
    a. Name(charfield)
    b. Bio (text field)
after model edits, run: makemigrations and/or migrate
'''

# --we create models.py and views.py (not autogenerated),
# important for larger apps bc django lets you segment out pieces of your app.
# can create sections with their own models / views / urls...

#here making a news site.  make two models
from django.db import models

#id of author will be autogenerated
class Author(models.Model):
    name = models.CharField(max_length=50)
    bio = models.TextField(max_length=2000)
    def __str__(self):
        return self.name

class Recipe(models.Model):
    title = models.CharField(max_length=100)
    # --give foreign key name of the class. will automatically figure out primary key
        # on the class you give it. we want it to be against the id key on the Author class.
        # figures out relationship too. since Author has no relationship to NewsItem
        # (will assume a mini to one). Django will add an id field to the Author attribute
        # under the hood. Remember to pass 2nd arg to ForeignKey so we tell
        # Django what to do if we delete Author, for example.  Will delete everything attached to
        # the foreign key
    author = models.ForeignKey(Author, on_delete=models.CASCADE)
    description = models.TextField(max_length=2000)
    time = models.CharField(max_length=100)
    instructions = models.TextField(max_length=2000)


    # --change the name of the class attribute in db by overwriting the __str__ method
    # --This will make it so that you can see the name attr of db item.
    def __str__(self):
        return self.title

